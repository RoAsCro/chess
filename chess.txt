class Piece {
	//colour is represented by the letter, colourCode is 0 or 1, 0 = black, 1 = white
	String type, colour;
	int colourCode;

	Piece(String inType, int inColour) {
		type = inType;
		colourCode = inColour;
		if (inColour == 0) colour = "b";
		else colour = "w";
	}

}

void printGrid() {
	String visualGrid = "";
	// y is used to  print the y axis labels
	int y = 8;
	for (Piece[] p : grid) {

		visualGrid = visualGrid + "\n" + "[" + y + "]";
		y--;

		for (Piece q : p) {

			visualGrid = visualGrid + "[ ";
			if (q != null) {
				visualGrid = visualGrid + q.type + q.colour;

			} else visualGrid = visualGrid + "  ";
			visualGrid = visualGrid + " ]";
		}
	}
	//print x axis labels
	visualGrid = visualGrid + "\n    [1]   [2]   [3]   [4]   [5]   [6]   [7]   [8]";
	System.out.println(visualGrid);
}
//needs both difference x and y
boolean collision (int yIncrement, int xIncrement, int difference, int targetX, int targetY, Piece selectedPiece) {
	System.out.println("collision");
	int j = 0;
	for (int i = 0; i != difference && j != difference;) {
		System.out.println("i: " + i + " difference: " + difference + " j: " + j);
		System.out.println(targetY + i);
		System.out.println(targetX + j);
		if (!(grid[targetY + i][targetX + j] == null || (i == 0 && grid[targetY + i][targetX + j] != null && grid[targetY + i][targetX + j].colour != selectedPiece.colour))) {
			return false;
		}
		if (difference < 0) {
			i -= yIncrement;
			j -= xIncrement;
		}
		else {
			i += yIncrement;
			j += yIncrement;
		}
	}
	return true;
}

boolean movePiece(int startX, int startY, int targetX, int targetY) {
	System.out.println("movePiece");
	Piece selectedPiece = grid[startY][startX];
	Piece targetLocation = grid[targetY][targetX];
	//Check if piece in the way
	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX;
		int yDifference = startY - targetY;
		//Generalise the below to a function
		if (startX != targetX && startY != targetY) {
			if (!collision(1, 1, xDifference, targetX, targetY, selectedPiece)) return false;
			/*for (int i = 0; i != xDifference;) {
				if (!(grid[targetY + i][targetX + i] == null || (i == 0 && grid[targetY + i][targetX + i] != null && grid[targetY + i][targetX + i].colour != selectedPiece.colour))) {
					return false;
				}
				if (xDifference < 0) i--;
				else i++;
			}*/
		} else if (startX != targetX) {
			if (!collision(0, 1, xDifference, targetX, targetY, selectedPiece)) return false;
			/*for (int i = 0; i != xDifference;) {
				if (!(grid[startY][targetX + i] == null || (i == 0 && grid[startY][targetX + i] != null && grid[startY][targetX + i].colour != selectedPiece.colour))) {
					return false;
				}
				if (xDifference < 0) i--;
				else i++;
			}*/

		} else if (startY != targetY) {
			System.out.println("Y");
			System.out.println(yDifference);
			System.out.println("" + 1 + 0 + yDifference + targetX + targetY);
			if (!collision(1, 0, yDifference, targetX, targetY, selectedPiece)) return false;
			/*for (int i = 0; i != yDifference;) {
				if (!(grid[targetY + i][startX] == null || (i == 0 && grid[targetY + i][startX] != null && grid[targetY + i][startX].colour != selectedPiece.colour))) {
					return false;
				}
				if (yDifference < 0) i--;
				else i++;
			}*/
		}
	}

	grid[targetY][targetX] = selectedPiece;
	grid[startY][startX] = null;
	return true;
}


//Starting variables
boolean go = true;
int currentPlayer = 0;


//Initialise the grid
String[] orderOne = {"R", "N", "B", "Q", "K", "B", "N", "R"}
String[] orderTwo = {"R", "N", "B", "K", "Q", "B", "N", "R"}
Piece[][] grid = new Piece[8][8];

for (int j = 0; j < 8; j++) {
	int col = 0;
	if (j > 5) col = 1;
	if (j < 2 || j > 5) {
		for (int i = 0; i < 8; i++) {

			if (j == 1 || j == 6) {
				grid[j][i] = new Piece("P", col);

			} else if (j == 0) {
				grid[j][i] = new Piece(orderOne[i], col);

			} else {
				grid[j][i] = new Piece(orderTwo[i], col);

			}

		}
	}
}







//Cycle while playing
while (go) {
	printGrid();
	currentPlayer = Math.abs(currentPlayer - 1);
	int startX = 0, startY = 0, targetX = 0, targetY = 0;

	//Piece selection formatted xy - 11, 14 etc.
	boolean selectPiece = true;
	while (selectPiece) {
		System.out.print("Select a piece: ");
		String targetPiece = System.console().readLine();
		System.out.println();

		startX = Math.abs(Integer.parseInt(targetPiece.substring(0,1)) - 1);
		startY = Math.abs(Integer.parseInt(targetPiece.substring(1,2)) - 8);

		//Check valid piece
		if (grid[startY][startX] == null || grid[startY][startX].colourCode != currentPlayer) {
			System.out.println("Sorry, that's not a valid piece.");
		} else selectPiece = false;
	}
	boolean selectTarget = true;
	while (selectTarget) {
		System.out.print("Select where to move it: ");
		String targetLocation = System.console().readLine();
		System.out.println();
		targetX = Math.abs(Integer.parseInt(targetLocation.substring(0,1)) - 1);
		targetY = Math.abs(Integer.parseInt(targetLocation.substring(1,2)) - 8);
		if (movePiece(startX, startY, targetX, targetY)) selectTarget = false;
		else System.out.println("Sorry, that's not a valid move.");
	}


}
