class Piece {
	//colour is represented by the letter, colourCode is 0 or 1, 0 = black, 1 = white
	String type, colour;
	int colourCode;

	Piece(String inType, int inColour) {
		type = inType;
		colourCode = inColour;
		if (inColour == 0) colour = "b";
		else colour = "w";
	}

}

void printGrid() {
	String visualGrid = "";
	// y is used to  print the y axis labels
	int y = 8;
	for (Piece[] p : grid) {

		visualGrid = visualGrid + "\n" + "[" + y + "]";
		y--;

		for (Piece q : p) {

			visualGrid = visualGrid + "[ ";
			if (q != null) {
				visualGrid = visualGrid + q.type + q.colour;

			} else visualGrid = visualGrid + "  ";
			visualGrid = visualGrid + " ]";
		}
	}
	//print x axis labels
	visualGrid = visualGrid + "\n    [1]   [2]   [3]   [4]   [5]   [6]   [7]   [8]";
	System.out.println(visualGrid);
}

boolean collision (int yIncrement, int xIncrement, int difference, int targetX, int targetY, Piece selectedPiece) {
	int j = 0;

	for (int i = 0; i != difference && j != difference;) {

		if (!(grid[targetY + i][targetX + j] == null || (i == 0 && grid[targetY + i][targetX + j] != null && grid[targetY + i][targetX + j].colour != selectedPiece.colour))) {
			return false;
		}

		i += yIncrement;
		j += xIncrement;

	}
	return true;
}


boolean movePiece(int startX, int startY, int targetX, int targetY) {
	Piece selectedPiece = grid[startY][startX];
	Piece targetLocation = grid[targetY][targetX];
	
	//Check if inCheck	
	


	//Check if piece in the way
	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX, yDifference = startY - targetY, xIncrement = 1, yIncrement = 1;
		if (xDifference < 0) xIncrement = -1;
		if (yDifference < 0) yIncrement = -1;

		if (startX != targetX && startY != targetY) {
			if (!collision(yIncrement, xIncrement, xDifference, targetX, targetY, selectedPiece)) return false;

		} else if (startX != targetX) {
			if (!collision(0, xIncrement, xDifference, targetX, targetY, selectedPiece)) return false;


		} else if (startY != targetY) {
			if (!collision(yIncrement, 0, yDifference, targetX, targetY, selectedPiece)) return false;

		}
	}
	//Checks passed!
	if (selectedPiece.type.equals("K")) {
		if (selectedPiece.colourCode == 0) {
			kingLocationBX = targetX;
			kingLocationBY = targetY;
		} else {
			kingLocationWX = targetX;
			kingLocationWY = targetY;
		}
	}
	//System.out.println("Black King: " + kingLocationBX + "," + kingLocationBY);
	//System.out.println("White King: " + kingLocationWX + "," + kingLocationWY);
	grid[targetY][targetX] = selectedPiece;
	grid[startY][startX] = null;
	return true;
}


void checkCheck() {
	int startX, startY;
	if (currentPlayer == 0) {
		startX = kingLocationBX;
		startY = kingLocationBY;
	} else {
		startX = kingLocationWX;
		startY = kingLocationWY;
	}


	
}

//Used to check all possible moves to check the collision function is working properly
void testMove(int startX, int startY) {

	Piece selectedPiece = grid[startY][startX];
	//Test the Y axis
	// I shouldn't need to repeat the for loop
	/* int k = 1;
	for (int j = 0; j < 2; j++; k-- j++) {
		for (int i = 7; i > -8; i--) {
			if (startX + i*j < 8 && startX + i*j > -1 && startY + i*k < 8 && startY + i*k > -1) {
					int targetY = startY + i*k, targetX = startX + i*j;
			}
		}
	}
	*/
	for (int i = 7; i > -8; i--) {
	if (startY + i < 8 && startY + i > -1) {

	int targetY = startY + i, targetX = startX;
	Piece targetLocation = grid[targetY][targetX];

	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX, yDifference = startY - targetY, xIncrement = 1, yIncrement = 1;
		if (xDifference < 0) xIncrement = -1;
		if (yDifference < 0) yIncrement = -1;
		if (startY != targetY) {
			if (!collision(yIncrement, 0, yDifference, targetX, targetY, selectedPiece)) System.out.println((Math.abs(targetX + 1)) + "," + (Math.abs(8 - targetY)) + " is not a valid move.");

		}
	}
	}
	}
	//Test the X axis
	for (int i = 7; i > -8; i--) {
	if (startX + i < 8 && startX + i > -1) {


	int targetY = startY, targetX = startX + i;
	Piece targetLocation = grid[targetY][targetX];

	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX, yDifference = startY - targetY, xIncrement = 1, yIncrement = 1;
		if (xDifference < 0) xIncrement = -1;
		if (yDifference < 0) yIncrement = -1;
		if (startX != targetX) {
			if (!collision(0, xIncrement, xDifference, targetX, targetY, selectedPiece)) System.out.println((Math.abs(targetX + 1)) + "," + (Math.abs(8 - targetY)) + " is not a valid move.");

		}
	}
	}
	}
	// Test x = y
	for (int i = 7; i > -8; i--) {
	if (startX + i < 8 && startX + i > -1 && startY + i < 8 && startY + i > -1) {


	int targetY = startY + i, targetX = startX + i;
	Piece targetLocation = grid[targetY][targetX];

	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX, yDifference = startY - targetY, xIncrement = 1, yIncrement = 1;
		if (xDifference < 0) xIncrement = -1;
		if (yDifference < 0) yIncrement = -1;
		if (startX != targetX && startY != targetY) {
			if (!collision(yIncrement, xIncrement, xDifference, targetX, targetY, selectedPiece)) System.out.println((Math.abs(targetX + 1)) + "," + (Math.abs(8 - targetY)) + " is not a valid move.");

		}
		
	}
	}
	// Test x = -y
	if (startX + i < 8 && startX + i > -1 && startY - i < 8 && startY - i > -1) {


	int targetY = startY - i, targetX = startX + i;
	Piece targetLocation = grid[targetY][targetX];

	if (!selectedPiece.type.equals("N")) {
		int xDifference = startX - targetX, yDifference = startY - targetY, xIncrement = 1, yIncrement = 1;
		if (xDifference < 0) xIncrement = -1;
		if (yDifference < 0) yIncrement = -1;
		if (startX != targetX && startY != targetY) {
			if (!collision(yIncrement, xIncrement, xDifference, targetX, targetY, selectedPiece)) System.out.println((Math.abs(targetX + 1)) + "," + (Math.abs(8 - targetY)) + " is not a valid move.");

		}
		
	}
	}

	}
}


//Starting variables
boolean go = true;
int currentPlayer = 0;

//Initialise the grid
String[] orderOne = {"R", "N", "B", "K", "Q", "B", "N", "R"}
String[] orderTwo = {"R", "N", "B", "Q", "K", "B", "N", "R"}
Piece[][] grid = new Piece[8][8];

for (int j = 0; j < 8; j++) {
	int col = 0;
	if (j > 5) col = 1;
	if (j < 2 || j > 5) {
		for (int i = 0; i < 8; i++) {

			if (j == 1 || j == 6) {
				grid[j][i] = new Piece("P", col);

			} else if (j == 0) {
				grid[j][i] = new Piece(orderOne[i], col);

			} else {
				grid[j][i] = new Piece(orderTwo[i], col);

			}

		}
	}
}

//Set king location
int kingLocationBY = 0, kingLocationBX = 3, kingLocationWY = 7, kingLocationWX = 4;





//Cycle while playing
while (go) {
	printGrid();
	currentPlayer = Math.abs(currentPlayer - 1);
	int startX = 0, startY = 0, targetX = 0, targetY = 0;

	//Piece selection formatted xy - 11, 14 etc.
	boolean selectPiece = true;
	while (selectPiece) {
		System.out.print("Select a piece: ");
		String targetPiece = System.console().readLine();
		System.out.println();

		startX = Math.abs(Integer.parseInt(targetPiece.substring(0,1)) - 1);
		startY = Math.abs(Integer.parseInt(targetPiece.substring(1,2)) - 8);

		//Check valid piece
		if (grid[startY][startX] == null || grid[startY][startX].colourCode != currentPlayer) {
			System.out.println("Sorry, that's not a valid piece.");
		} else selectPiece = false;
	}
	boolean selectTarget = true;
	while (selectTarget) {
		System.out.print("Select where to move it: ");
		String targetLocation = System.console().readLine();
		System.out.println();
		if (targetLocation.equals("TEST")) {
			testMove(startX, startY);
			continue;
		}
		targetX = Math.abs(Integer.parseInt(targetLocation.substring(0,1)) - 1);
		targetY = Math.abs(Integer.parseInt(targetLocation.substring(1,2)) - 8);
		if (movePiece(startX, startY, targetX, targetY)) selectTarget = false;
		else System.out.println("Sorry, that's not a valid move.");
	}


}
